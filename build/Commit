#!/bin/bash

if [[ $(pwd) != $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) ]] ; then
        echo "Bash script must be executing within the build folder"
        exit
fi

simulate=0
if [[ "$1" == "--simulate" ]] ; then
	echo
	echo "Simulating - no actual commits are made!"
	echo
	simulate=1
fi

# Bump NPM package version

echo "Please select how to publish changes to NPM."
echo "0) Do not publish NPM package"
echo "1) Publish as Patch update (bug fixes)"
echo "2) Publish as Minor update (new features and improvements)"
echo "3) Publish as Major update (major new features and breaking changes)"
read npmtype

if [[ "$npmtype" == "1" || "$npmtype" == "2" || "$npmtype" == "3" ]] ; then
	echo "Enter optional commit message and press ENTER:"
	read npmcommitmsg # The value %s will be replaced by the new version number
fi

if [[ $simulate == 0 && "$npmtype" == "1" ]] ; then
	echo "Bumping patch number"
	(cd npm/ && npm version patch -m "$npmcommitmsg")
elif [[ $simulate == 0 && "$npmtype" == "2" ]] ; then
	echo "Bumping minor version number"
	(cd npm/ && npm version minor -m "$npmcommitmsg")
elif [[ $simulate == 0 && "$npmtype" == "3" ]] ; then
	echo "Bumping major version number"
	(cd npm/ && npm version major -m "$npmcommitmsg")
fi

if [[ "$npmtype" == "1" || "$npmtype" == "2" || "$npmtype" == "3" ]] ; then
	# Parse out version number from package.json (e.g. 1.0.5)
	# and update VersionInfo object in Core/Core.js.

	npmversion=$(cat npm/package.json | grep version | awk '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')
	npmMajor=$(echo $npmversion | cut -d'.' -f1)
	npmMinor=$(echo $npmversion | cut -d'.' -f2)
	npmPatch=$(echo $npmversion | cut -d'.' -f3)
	versionObject="VersionInfo: { Major: $npmMajor, Minor: $npmMinor, Patch: $npmPatch }"

	echo "Updating version number in Core.js"
	echo $versionObject

	sed -i'' "s/VersionInfo.*{.*}/$versionObject/" ../Core/Core.js
	#sed -ine "s/VersionInfo.*{.*}/VersionInfo: { Major: $npmMajor, Minor: $npmMinor, Patch: $npmPatch }/" ../Core/Core.js

	echo "Version bumped - rebuilding to include new version information in package"
	./Build
fi

# Commit to GIT

echo "Committing to GIT"

git status

echo
echo "All changed files will be added to stage and pushed to GIT."
echo "You will be prompted to enter a commit message."
echo "$ git add --update ../"
echo "$ git commit -m title -m description"
echo "$ git push"
echo "Press ENTER to continue or CTRL + C to cancel."
read

echo "Enter short commit title (no quotes!) and press ENTER"
read gittitle
echo "Enter commit description (no quotes!) and press ENTER"
read gitdescription

if [[ $simulate == 0 ]] ; then
	git add --update ../
	git commit -m "$gittitle" -m "$gitdescription"
fi

echo "Ready to push changes to GIT."
echo "Title: $gittitle"
echo "Description: $gitdescription"
echo "Press ENTER to continue or CTRL + C to cancel."
read

if [[ $simulate == 0 ]] ; then
	git push
fi

echo "Done pushing changes to GIT."

# Publish NPM package

if [[ "$npmtype" == "1" || "$npmtype" == "2" || "$npmtype" == "3" ]] ; then
	if [[ $simulate == 0 ]] ; then
		(cd npm/ && npm publish)
		echo "NPM package published"
	fi
fi
