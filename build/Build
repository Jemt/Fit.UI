#!/bin/bash

if [[ $(pwd) != $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) ]] ; then
        echo "Bash script must be executing within the build folder"
        exit
fi

# Compile Fit.UI
# This produces Fit.UI.js, Fit.UI.min.js, Fit.UI.css, and Fit.UI.min.css

echo "Invoking Merge"

if [[ "$1" == "--nomin" ]] ; then
	echo
	echo "WARNING: Fit.UI is NOT minified!"
	echo "This build is NOT suitable for distribution!"
	echo
	./Merge umd # No minification
else
	./Merge umd minify
fi

# Build documentation

docsGenerated=0

if [[ -x $(command -v mono) ]] ; then
	echo "Invoking SimpleDocs"
	mono SimpleDocs/SimpleDocs.exe --OutputFormat=HTML --ResultFile=SimpleDocs.html
	mono SimpleDocs/SimpleDocs.exe --OutputFormat=JSON --ResultFile=SimpleDocs.json
	docsGenerated=1
else
	echo "WARNING: Mono Framework not installed - unable to generate documentation!"
	echo "Press ENTER to continue."
	read
fi

# Create dist folder and ZIP package

echo "Invoking CreateDist"

./CreateDist

# Create NPM package

echo "Updating source code in NPM package"

if [[ -d npm/dist ]] ; then
	rm -R npm/dist
fi

cp -R dist npm/

# Build TypeScript typings and add to NPM package

if [[ $docsGenerated == 1 ]] ; then
	echo "Generating typings in NPM package"

	if [[ -x $(command -v nodejs) ]] ; then
		nodejs TypingsGenerator.js > npm/types/index.d.ts
	else
		node TypingsGenerator.js > npm/types/index.d.ts
	fi
else
	echo "WARNING: Unable to generate TypeScript typings - no documentation generated!"
	echo "Press ENTER to continue."
	read
fi

# Update NPM package

if [[ -d ../node_modules ]] ; then
	echo "Installing updated Fit.UI NPM package to allow testing of type definitions"

	if [[ -d ../node_modules/fit-ui ]] ; then
		rm -R ../node_modules/fit-ui
	fi

	cp -R npm ../node_modules/fit-ui
fi

echo "Build completed"
